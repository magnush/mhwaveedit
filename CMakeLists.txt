cmake_minimum_required(VERSION 3.22)

set(MWE_TARGET        "mhWaveEdit")
set(MWE_VERSION       "1.4.24")
set(MWE_MAC_COPYRIGHT "Â© 2002-2018 Magnus Hjorth.")
set(MWE_MAC_BUNDLE_ID "mh.wave.edit")

set(CMAKE_C_STANDARD 17)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w")

project(${MWE_TARGET}
	VERSION ${MWE_VERSION}
  DESCRIPTION "Sound file editor (written in C using the GTK+ toolkit)"
  HOMEPAGE_URL "https://github.com/magnush/mhwaveedit"
	LANGUAGES C
)

# GLOBAL OPTIONS
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK4 REQUIRED gtk4)

# Autogenerated by auto2cmake on 2022-02-20 17:58:41

# Options

# Option to Don't use GTK+ 2, use 1.2 instead
option( GTK2 "Don't use GTK+ 2, use 1.2 instead" OFF )

# Option to Don't include any Ladspa support
option( LADSPA "Don't include any Ladspa support" OFF )

# Option to Treat warnings as errors during compilation
option( WERROR "Treat warnings as errors during compilation" OFF )

# The lines below will generate the config.h based on the options above
# The file will be in the ${CMAKE_BINARY_DIR} location
set(CONFIG_H ${CMAKE_BINARY_DIR}/config.h)
string(TIMESTAMP CURRENT_TIMESTAMP)
file(WRITE ${CONFIG_H} "/* WARNING: This file is auto-generated by CMake on ${CURRENT_TIMESTAMP}. DO NOT EDIT!!! */\n\n")
if( GTK2 )
    message(" GTK2 Enabled")
    file(APPEND ${CONFIG_H} "/* Don't use GTK+ 2 use 1.2 instead */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_GTK2 \n\n")
endif( GTK2 )
if( LADSPA )
    message(" LADSPA Enabled")
    file(APPEND ${CONFIG_H} "/* Don't include any Ladspa support */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_LADSPA \n\n")
## !!! WARNING HAVE_LADSPA Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define HAVE_LADSPA\n\n")
## !!! WARNING HAVE_SYS_LADSPA_H Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define HAVE_SYS_LADSPA_H\n\n")
endif( LADSPA )
if( WERROR )
    message(" WERROR Enabled")
    file(APPEND ${CONFIG_H} "/* Treat warnings as errors during compilation */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_WERROR \n\n")
endif( WERROR )

## !!! WARNING These are the defines that were defined regardless of an option.
## !!! Or the script couldn't match them. Match them accordingly, delete them or keep them
file(APPEND ${CONFIG_H} "/* Use gdouble instead of gfloat as sample data type */\n")
file(APPEND ${CONFIG_H} "#define [USE_DOUBLE_SAMPLES]  \n\n ")
file(APPEND ${CONFIG_H} "/* If defined disables GTK+ type checking */\n")
file(APPEND ${CONFIG_H} "#define GTK_NO_CHECK_CASTS  \n\n ")
file(APPEND ${CONFIG_H} "/* Use libsndfile library */\n")
file(APPEND ${CONFIG_H} "#define HAVE_LIBSNDFILE  \n\n ")
file(APPEND ${CONFIG_H} "/* Use libsamplerate library */\n")
file(APPEND ${CONFIG_H} "#define HAVE_LIBSAMPLERATE  \n\n ")
file(APPEND ${CONFIG_H} "/* Enable PortAudio sound driver */\n")
file(APPEND ${CONFIG_H} "#define HAVE_PORTAUDIO  \n\n ")
file(APPEND ${CONFIG_H} "/* Enable SDL sound driver */\n")
file(APPEND ${CONFIG_H} "#define HAVE_SDL  \n\n ")
file(APPEND ${CONFIG_H} "/* Enable ALSA sound driver */\n")
file(APPEND ${CONFIG_H} "#define HAVE_ALSALIB  \n\n ")
file(APPEND ${CONFIG_H} "/* Enable OSS sound driver */\n")
file(APPEND ${CONFIG_H} "#define HAVE_OSS  \n\n ")
file(APPEND ${CONFIG_H} "/* Enable JACK sound driver */\n")
file(APPEND ${CONFIG_H} "#define HAVE_JACK  \n\n ")
file(APPEND ${CONFIG_H} "/* Enable PulseAudio sound driver */\n")
file(APPEND ${CONFIG_H} "#define HAVE_PULSEAUDIO  \n\n ")
file(APPEND ${CONFIG_H} "/* Enable EsounD sound driver */\n")
file(APPEND ${CONFIG_H} "#define HAVE_ESOUND  \n\n ")
file(APPEND ${CONFIG_H} "/* Enable Sun audio sound driver */\n")
file(APPEND ${CONFIG_H} "#define HAVE_SUN  \n\n ")
file(APPEND ${CONFIG_H} "/* Enable aRts driver */\n")
file(APPEND ${CONFIG_H} "#define HAVE_ARTSC  \n\n ")
file(APPEND ${CONFIG_H} "/* Defined if Glib thread support is available */\n")
file(APPEND ${CONFIG_H} "#define HAVE_GTHREAD  \n\n ")
file(APPEND ${CONFIG_H} "/* Defined to get fseeko/ftello prototypes */\n")
file(APPEND ${CONFIG_H} "#define _LARGEFILE_SOURCE  \n\n ")
file(APPEND ${CONFIG_H} "/* Defined if unsetenv returns an integer */\n")
file(APPEND ${CONFIG_H} "#define UNSETENV_RETVAL  \n\n ")

# Setting the include directory for the application to find config.h
include_directories( ${CMAKE_BINARY_DIR} )
include_directories(${GTK4_INCLUDE_DIRS})
link_directories(${GTK4_LIBRARY_DIRS})
# Since we have created a config.h add a global define for it
add_definitions(${GTK4_CFLAGS_OTHER})
add_definitions( "-DHAVE_CONFIG_H" )

add_subdirectory( src )
